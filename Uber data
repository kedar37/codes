import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
from sklearn. linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from math import sqrt
from sklearn import metrics


dataset=pd.read_csv("D:/College notes/BE/ML/CSV files/uber.csv")


print(dataset)


dataset.head()
dataset.shape
dataset.isnull().sum()

dataset['dropoff_latitude'].fillna(value=dataset['dropoff_latitude'].mean(),inplace = True)
dataset['dropoff_longitude'].fillna(value=dataset['dropoff_longitude'].median(),inplace = True)
dataset.isnull().sum()

x = dataset[["pickup_latitude","dropoff_latitude","pickup_longitude","dropoff_longitude"]]

y = dataset["fare_amount"]
y.head()

corr=dataset.corr()
print(corr)
dataplot = sb.heatmap(df1.corr(), cmap="YlGnBu", annot=True)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)

model = LinearRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

print(y_pred)

error_rate_test = r2_score(y_test,y_pred)
error_rate_test


print(mean_squared_error(y_test, y_pred, squared=False))

rms = sqrt(mean_squared_error(y_test, y_pred))
print(rms)


from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators = 1000, random_state=42)
rf.fit(x_train, y_train);

y_pred1 = rf.predict(x_test)

print(y_pred1)


error_rate_test = r2_score(y_test,y_pred1)
error_rate_test

print(mean_squared_error(y_test, y_pred1, squared=False))

rms = sqrt(mean_squared_error(y_test, y_pred1))
print(rms)

